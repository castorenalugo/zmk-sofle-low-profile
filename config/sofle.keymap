/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/led/led.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

&spi3 {
    compatible = "nordic,nrf-spim";
    status = "okay";
    pinctrl-0 = <&spi3_default>;
    pinctrl-1 = <&spi3_sleep>;
    pinctrl-names = "default", "sleep";

    led_strip: ws2812@0 {
        compatible = "worldsemi,ws2812-spi";

        /* SPI */

        reg = <0>; /* ignored, but necessary for SPI bindings */
        spi-max-frequency = <4000000>;

        /* WS2812 */

        chain-length = <29>; /* arbitrary; change at will */
        spi-one-frame = <0x70>;
        spi-zero-frame = <0x40>;
        color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
    };
};

nice_view_spi: &spi0 {
    compatible = "nordic,nrf-spim";
    pinctrl-0 = <&spi0_default>;
    pinctrl-1 = <&spi0_sleep>;
    pinctrl-names = "default", "sleep";

    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};

/ {
    chosen { zmk,underglow = &led_strip; };
};

/ {
    behaviors {
        macro: macro {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <500>;
            bindings = <&to 2 &to 3>;
            label = "MACRO";
        };
        w_cut: w_cut {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp W>, <&kp LC(X)>;

            mods = <(MOD_LCTL)>;
        };

        w_cc: w_cc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&w_cut>, <&kp LC(C)>;

            mods = <MOD_LALT>;
        };

        w_yank: w_yank {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp Y>, <&kp LC(V)>;

            mods = <(MOD_LCTL)>;
        };

        w_undo: w_undo {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp SLASH>, <&kp LC(Z)>;

            mods = <(MOD_LCTL)>;
        };

        prev: prev {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp P>, <&kp UP_ARROW>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        next: next {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp N>, <&kp DOWN>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        befr: befr {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp B>, <&kp LEFT>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL)>;
        };

        fwrd: fwrd { compatible = "zmk,behavior-mod-morph"; bindings = <&kp F>, <&kp RIGHT>; #binding-cells = <0>; mods = <(MOD_LCTL)>;};

        mod_ctrl: mod_ctrl { compatible = "zmk,behavior-mod-morph"; bindings = <&kp V>, <&kp PAGE_DOWN>; #binding-cells = <0>; mods = <MOD_LCTL>;};

        nav: nav { compatible = "zmk,behavior-mod-morph"; bindings = <&mod_ctrl>, <&kp PAGE_UP>; #binding-cells = <0>; mods = <MOD_LALT>;};

        home: home { compatible = "zmk,behavior-mod-morph"; bindings = <&kp A>, <&kp HOME>; #binding-cells = <0>; mods = <(MOD_LCTL)>;};

        end: end {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp E>, <&kp END>;

            mods = <(MOD_LCTL)>;
        };
        del: del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp DEL>;

            mods = <(MOD_LCTL)>;
        };
        srch: srch {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp LC(F)>;

            mods = <(MOD_LCTL)>;
        };
        r_src: r_src {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp R>, <&kp LS(F3)>;

            mods = <(MOD_LCTL)>;
        };
        to_fn: to_fn {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp X>, <&to 1>;

            mods = <(MOD_LCTL)>;
        };
        f_find: f_find {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&to 0>, <&find>;
            mods = <MOD_LCTL>;
        };
        s_save: s_save {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&saveall>, <&save>;
            mods = <MOD_LCTL>;
        };

    };

    macros {
        to_folder: to_folder {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp NUMBER_1>,
                <&macro_release>,
                <&kp NUMBER_1>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 0>,
                <&macro_release>,
                <&to 0>;
        };

        to_emacs: to_emacs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp NUMBER_2>,
                <&macro_release>,
                <&kp NUMBER_2>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 4>,
                <&macro_release>,
                <&to 4>;
        };

        to_browser: to_browser {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp NUMBER_3>,
                <&macro_release>,
                <&kp NUMBER_3>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 0>,
                <&macro_release>,
                <&to 0>;
        };

        to_terminal: to_terminal {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp NUMBER_4>,
                <&macro_release>,
                <&kp NUMBER_4>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 0>,
                <&macro_release>,
                <&to 0>;
        };

        to_notes: to_notes {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp NUMBER_5>,
                <&macro_release>,
                <&kp NUMBER_5>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 0>,
                <&macro_release>,
                <&to 0>;
        };

        to_chat: to_chat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LGUI>,
                <&macro_press>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp NUMBER_6>,
                <&macro_release>,
                <&kp LGUI>,
                <&macro_press>,
                <&to 0>,
                <&macro_release>,
                <&to 0>;
        };

        p1: p1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(A) &kp LS(C) &kp N1 &kp N0 &kp N8 &kp A &kp L &kp L &kp I &kp E &kp D &kp POUND &kp DLLR>;
            label = "P1";
        };

        p2: p2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(J) &kp E &kp R &kp G &kp O &kp T &kp A &kp S &kp S &kp N1 &kp N2 &kp N3 &kp EXCL &kp EXCL>;
            label = "P2";
        };

        find: find {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_wait_time 400>,
                <&macro_tap &kp LC(P)>,
                <&macro_wait_time 400>,
                <&to 0>;
        };
        save: save {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LC(S)>,
                <&macro_release &kp LC(S)>,
                <&to 0>;
        };
        saveall: saveall {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LC(K)>,
                <&macro_release &kp LC(K)>,
                <&macro_press &kp S>,
                <&macro_release &kp S>,
                <&to 0>;
        };
        killbfr: killbfr {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press &kp LC(W)>,
                <&macro_release &kp LC(W)>,
                <&to 0>;
        };

        select: select {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(S) &kp E &kp L &kp E &kp C &kp T &kp LPAR &kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp X &kp DOT &kp SPACE &kp RPAR &kp LEFT>;
            label = "SELECT";
        };

        where: where {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(W) &kp H &kp E &kp R &kp E &kp LPAR &kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp X &kp DOT &kp RPAR &kp LEFT &to 0>;
            label = "WHERE";
        };

        dist: dist {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(D) &kp I &kp S &kp T &kp I &kp N &kp C &kp T &kp LPAR &kp RPAR &to 0>;
            label = "DIST";
        };

        distb: distb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(D) &kp I &kp S &kp T &kp I &kp N &kp C &kp T &kp LS(B) &kp Y &kp LPAR &kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp X &kp DOT &kp RPAR &kp LEFT &to 0>;
            label = "distb";
        };

        fod: fod {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(F) &kp I &kp R &kp S &kp T &kp LS(O) &kp R &kp LS(D) &kp E &kp F &kp A &kp U &kp L &kp T &kp LPAR &kp RPAR &to 0>;
            label = "FOD";
        };

        foda: foda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(F) &kp I &kp R &kp S &kp T &kp LS(O) &kp R &kp LS(D) &kp E &kp F &kp A &kp U &kp L &kp T &kp LS(A) &kp S &kp Y &kp N &kp C &kp LPAR &kp RPAR &to 0>;
            label = "FODA";
        };

        tl: tl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(T) &kp O &kp LS(L) &kp I &kp S &kp T &kp LPAR &kp RPAR &to 0>;
            label = "TL";
        };

        tla: tla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(T) &kp O &kp LS(L) &kp I &kp S &kp T &kp LS(A) &kp S &kp Y &kp N &kp C &kp LPAR &kp RPAR &to 0>;
            label = "TLA";
        };

        ta: ta {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(T) &kp O &kp LS(A) &kp R &kp R &kp A &kp Y &kp LPAR &kp RPAR &to 0>;
            label = "TA";
        };

        taa: taa {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(T) &kp O &kp LS(A) &kp R &kp R &kp A &kp Y &kp LS(A) &kp S &kp Y &kp N &kp C &kp LPAR &kp RPAR &to 0>;
            label = "TAA";
        };

        any: any {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(A) &kp N &kp Y &kp LPAR &kp RPAR &to 0>;
            label = "ANY";
        };

        anya: anya {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(A) &kp N &kp Y &kp LS(A) &kp S &kp Y &kp N &kp C &kp LPAR &kp RPAR &to 0>;
            label = "ANYASYNC";
        };

        ob: ob {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(O) &kp R &kp D &kp E &kp R &kp B &kp Y &kp LPAR &kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp X &kp DOT &kp RPAR &kp LEFT &to 0>;
            label = "ORDERBY";
        };

        obd: obd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(O) &kp R &kp D &kp E &kp R &kp B &kp Y &kp LS(D) &kp E &kp S &kp C &kp E &kp N &kp D &kp I &kp N &kp G &kp LPAR &kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp X &kp DOT &kp RPAR &kp LEFT &to 0>;
            label = "ORDERBYDESC";
        };

        count: count {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(C) &kp O &kp U &kp N &kp T &kp LPAR &kp RPAR &to 0>;
            label = "COUNT";
        };

        countc: countc {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(C) &kp O &kp U &kp N &kp T &kp LPAR &kp X &kp SPACE &kp EQUAL &kp GT &kp SPACE &kp X &kp DOT &kp RPAR &kp LEFT &to 0>;
            label = "COUNTCOND";
        };

        sod: sod {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(S) &kp I &kp N &kp G &kp L &kp E &kp LS(O) &kp R &kp LS(D) &kp E &kp F &kp A &kp U &kp L &kp T &kp LPAR &kp RPAR &to 0>;
            label = "SOD";
        };

        soda: soda {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOT &kp LS(S) &kp I &kp N &kp G &kp L &kp E &kp LS(O) &kp R &kp LS(D) &kp E &kp F &kp A &kp U &kp L &kp T &kp LS(A) &kp S &kp Y &kp N &kp C &kp LPAR &kp RPAR &to 0>;
            label = "SODA";
        };

        lambda: r_arrow {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp EQUAL &kp GT &kp SPACE>;
            label = "R_ARROW";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "Default";
            bindings = <
&kp EQUAL  &kp N1   &kp N2   &kp N3     &kp N4   &kp N5                         &kp N6     &kp N7        &kp N8      &kp N9    &kp N0      &kp MINUS
&kp TAB    &kp Q    &w_cc    &end       &r_src   &kp T                          &w_yank    &kp U         &kp I       &kp O     &prev       &kp LBKT
&kp BSPC   &home    &srch    &del       &fwrd    &kp G                          &kp H      &kp J         &kp K       &kp L     &kp SEMI    &kp RET
&kp BSLH   &kp Z    &to_fn   &kp C      &nav     &befr     &kp A     &none      &next      &kp M         &kp COMMA   &kp DOT   &w_undo     &kp SQT
                    &kp A &kp B    &kp C      &kp LCTRL  &kp LALT            &kp LSHFT  &kp SPACE     &kp D   &kp E      &kp F
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
         func {
            display-name = "func";
            bindings = <
&trans  &trans  &trans   &trans  &trans   &trans                    &trans  &trans  &trans    &trans  &trans  &trans
&trans  &trans  &trans   &trans  &trans   &trans                    &trans  &trans  &trans    &trans  &trans  &trans
&trans  &trans  &s_save  &trans  &f_find  &to 0                     &trans  &trans  &killbfr  &trans  &trans  &trans
&trans  &trans  &trans   &trans  &trans   &trans  &trans    &trans  &trans  &trans  &trans    &trans  &trans  &trans
                &trans   &trans  &to 0    &trans  &trans    &trans  &trans  &trans  &trans    &trans
            >;
        };
    };
};
